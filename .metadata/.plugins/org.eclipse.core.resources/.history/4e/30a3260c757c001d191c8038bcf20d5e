package model.dao;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

import model.vo.EntregaVO;
import model.vo.SituacaoEntregaVO;
import model.vo.VendaVO;

public class EntregaDAO {

	public boolean cadastrarEntregaDAO(EntregaVO entregaVO) {
		Connection conn = Banco.getConnection();
		Statement stmt = Banco.getStatement(conn);
		boolean retorno = false;
		String query = "INSERT INTO ENTREGA (IDVENDA,IDENTREGADOR,SITUACAOENTREGA) VALUES ("
				+ entregaVO.getIdVenda() + ", "
				+ entregaVO.getIdentregador()+ ", "
				+ entregaVO.getSituacaoEntrega().getValor()+ ")";
		
		try {
			int resultado = stmt.executeUpdate(query);
			if(resultado == 1) {
				retorno = true;
			}
		} catch (Exception e) {
			System.out.println("Erro ao executar e query do método cadastrarEntregaDAO");
			System.out.println("Erro: " + e.getMessage());
		}finally {
			Banco.closeConnection(conn);
			Banco.closeStatement(stmt);
		}
		return retorno;
	}

	public boolean atualizarSituacaoEntregaDAO(VendaVO vendaVO) {
		EntregaVO entregaVO = this.consultarEntregaPorIdVendaDAO(vendaVO.getIdVenda());
		entregaVO.setSituacaoEntrega(SituacaoEntregaVO.getSituacaoEntregaVOPorValor(entregaVO.getSituacaoEntrega().getValor()+1));
		if(entregaVO.getSituacaoEntrega().getValor() == SituacaoEntregaVO.PEDIDO_ENTREGUE.getValor()) {
			entregaVO.setDataEntrega(LocalDateTime.now());
		}
		boolean retorno = false;
		if(entregaVO.getSituacaoEntrega().getValor() >= SituacaoEntregaVO.PEDIDO_ENTREGUE.getValor()) {
			retorno = this.atualizarEntregaDAO(entregaVO);
		}
		return retorno;
	}

	

	private boolean atualizarEntregaDAO(EntregaVO entregaVO) {
		Connection conn = Banco.getConnection();
		Statement stmt = Banco.getStatement(conn);
		boolean retorno = false;
		String query = "UPDATE ENTREGA SET SITUACAOENTREGA = " + entregaVO.getSituacaoEntrega().getValor();
		if(entregaVO.getDataEntrega() == null) {
			query += " WHERE IDENTREGA = " + entregaVO.getIdEntrega();
		} else {
			query += ", DATAENTREGA = '" + entregaVO.getDataEntrega() + "' WHERE IDENTREGA = " + entregaVO.getIdEntrega();
		}
		try {
			if(stmt.executeUpdate(query) == 1) {
				retorno = true;
			}
		} catch (SQLException e) {
			System.out.println("Erro ao executar e query do método atualizarEntregaDAO");
			System.out.println("Erro: " + e.getMessage());
		} finally {
			Banco.closeConnection(conn);
			Banco.closeStatement(stmt);
		}
		return retorno;
	}

	public boolean cancelarEntregaDAO(VendaVO vendaVO, int situacao) {
		Connection conn = Banco.getConnection();
		Statement stmt = Banco.getStatement(conn);
		boolean retorno = false;
		String query = "UPDATE entrega SET situacaoEntrega = " + situacao + ", "
				+"dataEntrega = '" + vendaVO.getDataCancelamento()
				+"'WHERE idVenda = " + vendaVO.getIdVenda();
		try {
			if(stmt.executeUpdate(query) == 1) {
				retorno = true;
			}
		} catch (Exception e) {
			System.out.println("Erro ao executar e query do método cancelarEntregaDAO");
			System.out.println("Erro: " + e.getMessage());
		} finally {
			Banco.closeStatement(stmt);
			Banco.closeConnection(conn);
		}
		return retorno;
	}

	public EntregaVO consultarEntregaPorIdVendaDAO(int idVenda) {
		Connection conn = Banco.getConnection();
		Statement stmt = Banco.getStatement(conn);
		ResultSet resultado = null;
		EntregaVO entrega = new EntregaVO();
		String query = "SELECT e.idEntrega, e .idVenda, e.idEntregador, se.descricao, e.dataentrega"
				+ " FROM entrega e, situacaoEntrega se  WHERE e.situacaoEntrega = se.ordem  AND e.idVenda = " + idVenda;
		try {
			resultado = stmt.executeQuery(query);
			if(resultado.next()) {
				entrega.setIdEntrega(Integer.parseInt(resultado.getString(1)));
				entrega.setIdVenda(Integer.parseInt(resultado.getString(2)));
				entrega.setIdentregador(Integer.parseInt(resultado.getString(3)));
				entrega.setSituacaoEntrega(SituacaoEntregaVO.valueOf(resultado.getString(4)));
				if(resultado.getString(5) != null) {
					entrega.setDataEntrega(LocalDateTime.parse(resultado.getString(5), DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")));}
				}
		} catch (SQLException e) {
			System.out.println("Erro ao executar e query do método consultarEntregaPorIdVendaDAO");
			System.out.println("Erro: " + e.getMessage());
		} finally {
			Banco.closeConnection(conn);
			Banco.closeStatement(stmt);
			Banco.closeResultSet(resultado);
		}
		
		return entrega;
	}

}
